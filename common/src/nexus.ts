/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  UserDeleteInput: { // input type
    email?: string | null; // String
    id?: string | null; // String
    username?: string | null; // String
  }
  UserLoginInput: { // input type
    email: string; // String!
    password: string; // String!
  }
  UserSignUpInput: { // input type
    email: string; // String!
    password: string; // String!
    role?: NexusGenEnums['Roles'] | null; // Roles
  }
}

export interface NexusGenEnums {
  Roles: "ADMIN" | "USER"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  AuthenticationError: { // root type
    message: string; // String!
  }
  Query: {};
  User: { // root type
    email?: string | null; // String
    id?: string | null; // ID
    role?: NexusGenEnums['Roles'] | null; // Roles
  }
  ValidationError: { // root type
    errorTypes?: Array<string | null> | null; // [String]
    field: string; // String!
    message: string; // String!
  }
  ValidationErrorsPayload: { // root type
    errors: NexusGenRootTypes['ValidationError'][]; // [ValidationError!]!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
  LoginResult: NexusGenRootTypes['AuthenticationError'] | NexusGenRootTypes['User'];
  SignUpResult: NexusGenRootTypes['User'] | NexusGenRootTypes['ValidationErrorsPayload'];
}

export type NexusGenRootTypes = NexusGenObjects & NexusGenUnions

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  AuthenticationError: { // field return type
    message: string; // String!
  }
  Query: { // field return type
    ok: boolean; // Boolean!
  }
  User: { // field return type
    email: string | null; // String
    id: string | null; // ID
    role: NexusGenEnums['Roles'] | null; // Roles
  }
  ValidationError: { // field return type
    errorTypes: Array<string | null> | null; // [String]
    field: string; // String!
    message: string; // String!
  }
  ValidationErrorsPayload: { // field return type
    errors: NexusGenRootTypes['ValidationError'][]; // [ValidationError!]!
  }
}

export interface NexusGenFieldTypeNames {
  AuthenticationError: { // field return type name
    message: 'String'
  }
  Query: { // field return type name
    ok: 'Boolean'
  }
  User: { // field return type name
    email: 'String'
    id: 'ID'
    role: 'Roles'
  }
  ValidationError: { // field return type name
    errorTypes: 'String'
    field: 'String'
    message: 'String'
  }
  ValidationErrorsPayload: { // field return type name
    errors: 'ValidationError'
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractTypeMembers {
  LoginResult: "AuthenticationError" | "User"
  SignUpResult: "User" | "ValidationErrorsPayload"
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = keyof NexusGenUnions;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = "LoginResult" | "SignUpResult";

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}